/** \page compression Compression algorithm wrapper

This wrapper provides some convenience when you want to use some sort of compression
somewhere in the project. The syntax is simple and LZ4 is already included as one
compression algorithm.\n
To use the functionality, turn on the option `ENABLE_COMPRESSION` in the CMake options.
New options to turn on individual encoding algorithms will be available.\n
Set LZ4 is on by default when the wrapper was enabled.\n
In the code, instantiate a `Compression` object, passing the requested compression algorithm as a std::string tag (see \ref tags below), which will offer the necessary functionality.
Consider the following snippet:

    #include <memory>
    #include "compression.h"
    
    std::vector<char> data;         //your data
    std::vector<char> compressed;   //object to store the compressed result
    std::vector<char> decompressed; //object to store the decompressed result

    std::unique_ptr<Compression> compression_instance;
    compression_instance = Compression::create("LZ4");

    compression_instance.compress(data.begin(), data.end(), compressed); //run compression algorithm

The encoded data now stored in `compressed`. The first size_t bytes contain the uncompressed size.\n
Additional error checking can be done, see Compression class page.\n
Decompression works similarly:

    compression_instance.decompress(compressed.begin(), compressed.end(), decompressed);

Decompressed now contains exactly the same values as `data`.\n
If things are going wrong, refer to the class page for more information.\n
Note that the instance is created on the heap, and needs to be freed by the programmer (or use smart pointers or something).

<table>
<caption id="tags">Algorithm Tags</caption>
<tr><th>Tag                      <th>Algorithm
<tr><th>None                     <th>No compression
<tr><th>LZ4                      <th>lz4 lz4.github.io/lz4/
</table>
*/