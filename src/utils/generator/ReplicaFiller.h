/*
 * Copyright (c) 2013-2017 Christoph Niethammer <christoph.niethammer@gmail.com>
 *
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER
 */

#ifndef REPLICAFILLER_H_
#define REPLICAFILLER_H_

#include <memory>

#include "utils/generator/ObjectFillerBase.h"
#include "utils/generator/GridFiller.h"

class InputBase;

class Object;

/** The ReplicaFiller returns molecules within an object by replicating molecules generated by another input reader / generator. */
class ReplicaFiller : public ObjectFillerBase {
public:
	ReplicaFiller() : _inputReader(nullptr), _origin() {}

	~ReplicaFiller() {}

	/** @brief Read in XML configuration for ReplicaFiller and all its included objects.
	 *
	 * The following xml object structure is handled by this method:
	 * \code{.xml}
	   <filler type="ReplicaFiller">
	     <input type=""><!-- See the documentation of the input reader --></input>
	     <origin><x>DOUBLE</x> <y>DOUBLE</y> <z>DOUBLE</z> <!-- base point for the replication --> </origin>
	   </filler>
	   \endcode
	 */
	void readXML(XMLfileUnits& xmlconfig);

	/** Initialize the generator with current internal state */
	void init();

	/* Set input reader */
	void setInputReader(std::shared_ptr<InputBase> inputReader) { _inputReader = inputReader; }

	/* Set object to fill */
	void setObject(std::shared_ptr<Object> object);

	/* Get object to fill */
	std::shared_ptr<Object> getObject();

	/** Get a single molecule
	 * By subsequent calls all molecules will be returned, one by one.
	 * @param[out] molecule  Pointer to molecule data structure where to store the molecule data (coordinate and component id)
	 * @return     0 if no more molecules can be returned
	 */
	int getMolecule(Molecule* molecule);

	std::string getPluginName() { return std::string("ReplicaFiller"); }

	static ObjectFillerBase* createInstance() { return new ReplicaFiller(); }

private:
	std::shared_ptr<InputBase> _inputReader;
	GridFiller _gridFiller;
	std::shared_ptr<Object> _object;
	double _origin[3];
	unsigned int _componentid;
};

#endif  // REPLICAFILLER_H_

